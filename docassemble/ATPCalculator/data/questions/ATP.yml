---
metadata:
  title: |
    National Ability to Pay Calculator
  short title: |
    ATP Calculator
  description: |
    National Ability to Pay Calculator
  authors:
    - name: Alexander Clark
      organization: Clark Management Consulting
  revision_date: 2024-12-02
  




---
modules:
  - .constants_and_dropdowns
  - .irs_housing
  - .financial_functions
---
objects:
  - jobs: DAList.using(object_type=Thing, there_are_any=True)
  - not_jobs: DAList.using(object_type=Thing, there_are_any=True)
---
features:
  navigation: True
  progress bar: True
  javascript: 
    - datereplace.js
  css: atp.css
  inverse navbar: False
---
include:
  - earned_income.yml
  - other_income.yml
  - basic_info.yml
  - intro.yml
  - review.yml
  - finish.yml
  - expenses.yml
  - gen_aff_questions.yml
  - gen_docs.yml
---
sections:
  - Welcome
  - Basic Information
  - Income
  - Expenses
  - Review
  - Finish
---
mandatory: True
code: |
  import re
  
  nav.set_section('Welcome')
  intro
  nav.set_section('Basic Information')
  basic_info
  total_housing_allowance = get_total_housing_allowance(county, household_size)
  earned_income_total = 0
  other_income_totals = 0
  nav.set_section('Income')
  if has_ei:
    jobs[0].name.text
    earned_income_total = earned_income_total + ei_consolidate(jobs)
    aff_employed = True
    prevent_going_back()
  else:
    aff_employed = False
  if has_oi:
    not_jobs[0].name.text
    oi_consolidated_list = oi_consolidate(not_jobs)
    other_income_totals = other_income_totals + oi_consolidated_list['inc_oi_total']
    prevent_going_back()
  else:
    oi_consolidated_list = { "inc_SS": 0, 
                            "inc_unemp": 0, 
                            "inc_VA": 0, 
                            "inc_tanf": 0, 
                            "inc_pens": 0, 
                            "inc_snap": 0, 
                            "inc_alim": 0, 
                            "inc_invest": 0, 
                            "inc_oi_total": 0 }
  nav.set_section('Expenses')
  FICA = earned_income_total * FICA_rate
  expenses
  prevent_going_back()
  all_expenses =                (monthly_food + \
                                monthly_housekeeping + \
                                monthly_apparel_and_service + \
                                monthly_personal_care + \
                                monthly_misc + \
                                monthly_operating + \
                                monthly_ownership + \
                                monthly_public_transit + \
                                monthly_housing + \
                                monthly_housing_utils_total + \
                                monthly_health_insurance + \
                                monthly_oop_healthcare + \
                                monthly_medical_expenses + \
                                monthly_child_dependent_care + \
                                monthly_fica + \
                                monthly_est_tax_payments + \
                                monthly_term_life_insurance + \
                                monthly_retirement_required + \
                                monthly_retirement_voluntary + \
                                monthly_union_dues + \
                                monthly_delinquent_taxes + \
                                monthly_student_loans + \
                                monthly_child_support + \
                                monthly_alimony + \
                                monthly_court_debt_payments + \
                                monthly_other)
                                
  total_income =                earned_income_total + other_income_totals
  net_income =                  total_income - all_expenses
  #installment_rap =             net_income * max_percent_payment
  
  monthly_fpc_total =             monthly_food + \
                                  monthly_housekeeping + \
                                  monthly_apparel_and_service + \
                                  monthly_personal_care + \
                                  monthly_misc
  monthly_tx_total =              monthly_operating + \
                                  monthly_ownership + \
                                  monthly_public_transit
  monthly_md_total =              monthly_health_insurance + \
                                  monthly_oop_healthcare + \
                                  monthly_medical_expenses
  monthly_other_expenses_total =  monthly_child_dependent_care + \
                                  monthly_fica + \
                                  monthly_est_tax_payments + \
                                  monthly_term_life_insurance + \
                                  monthly_retirement_required + \
                                  monthly_retirement_voluntary + \
                                  monthly_union_dues + \
                                  monthly_delinquent_taxes + \
                                  monthly_student_loans + \
                                  monthly_child_support + \
                                  monthly_alimony + \
                                  monthly_court_debt_payments + \
                                  monthly_other
  
  #if installment_rap < min_payment:
  #  installment_rap = min_payment
  #overall_rap = installment_rap * max_num_monthly_payments
  if fine_penalty_balance <= (min_payment * max_num_monthly_payments):
	  installment_rap = min_payment
	  number_payments = fine_penalty_balance / installment_rap
	  amount_repaid = fine_penalty_balance
	  final_balance = 0
  else:
	  if (net_income * max_percent_payment * max_num_monthly_payments) < fine_penalty_balance:
		  installment_rap = net_income * max_percent_payment
      if installment_rap < min_payment:
        installment_rap = min_payment
		  number_payments = max_num_monthly_payments
		  amount_repaid = installment_rap * max_num_monthly_payments
		  final_balance = fine_penalty_balance - amount_repaid
	  if (net_income * max_percent_payment * max_num_monthly_payments) >= fine_penalty_balance:
		  installment_rap = net_income * max_percent_payment
		  amount_repaid = fine_penalty_balance
		  number_payments = fine_penalty_balance / installment_rap
		  final_balance = 0
  monthly_debts_text = get_monthly_debts_text(monthly_housing, monthly_basic_utils, monthly_telecom_utils, monthly_real_estate_taxes_insurance, monthly_maint_repairs, monthly_housing_utils_total, monthly_delinquent_taxes, monthly_student_loans, monthly_child_support, monthly_alimony, monthly_court_debt_payments)
  monthly_expenses_text = get_monthly_expenses_text(monthly_food, monthly_housekeeping, monthly_apparel_and_service, monthly_personal_care, monthly_misc, monthly_operating, monthly_ownership, monthly_public_transit, monthly_housing, monthly_basic_utils, monthly_telecom_utils, monthly_real_estate_taxes_insurance, monthly_maint_repairs, monthly_housing_utils_total, monthly_health_insurance, monthly_oop_healthcare, monthly_medical_expenses, monthly_child_dependent_care, monthly_fica, monthly_est_tax_payments, monthly_term_life_insurance, monthly_retirement_required, monthly_retirement_voluntary, monthly_union_dues, monthly_other)
  if gen_aff:
    new_sections = ['Welcome', 'Basic Information', 'Income', 'Expenses', 'Affidavit', 'Review', 'Finish']
    nav.set_sections(new_sections)
    nav.set_section('Affidavit')
    gen_aff_questions
    prevent_going_back()
  nav.set_section('Review')
  review
  nav.set_section('Finish')
  if gen_aff:
    if not defined('aff_other_restitution_details'):
      aff_other_restitution_details = ''
    if not defined('aff_cemployer'):
      aff_cemployer = ''  
    if not defined('aff_current_employment_start'):
      aff_current_employment_start = ''
    if not defined('aff_lt_fulltime'):
      aff_lt_fulltime = 'Full-Time'
    if not defined('aff_takehome_pay'):
      aff_takehome_pay = ''
    if not defined('aff_takehome_freq'):
      aff_takehome_freq = ''
    if not defined('aff_other_income'):
      aff_other_income = ''
    if not defined('aff_unpaid_judgments_amount'):
      aff_unpaid_judgments_amount = ''
    if not defined('aff_garnish'):
      aff_garnish = False 
    if not defined('aff_garnish_details'):
      aff_garnish_details = ''
    if not defined('aff_windfall_details'):
      aff_windfall_details = ''
    exhibit_aff_gen
  else:
    exhibit_gen
  finish
  
  