id: atp_basic_info
question: |
  Ability to Pay Calculator - Basic Information
subquestion: |
  Please complete the boxes below related to the person's case and money situation.
progress: 20
fields:
  - First Name: first_name
  - Middle Name: middle_name
    required: false
  - Last Name: last_name
  - Suffix: suffix
    required: false
  - State: state
    input type: dropdown
    code: states_dict
    datatype: str
    required: true
  - County: county
    choices: 
     -  N/A
    #js enable if: val('state')
    required: true
  - Is Defendant 65 years of age or older?: sixty_five_or_older
    datatype: yesnoradio
  - Household Size: household_size
    datatype: integer
    min: 1
  - Number of Cars: number_of_cars
    input type: dropdown
    code: number_cars_options
  - Fine/Penalty Balance: fine_penalty_balance
    datatype: currency
    min: ${ min_penalty }
  - Earned Income: has_ei
    datatype: yesnoradio
  - Other Income: has_oi
    datatype: yesnoradio
  - note: |
      <script>
        // Call the function when the page loads or an action is performed
        $(document).on('daPageLoad', function() {
          questionPage = document.getElementsByTagName("H1")[0].innerHTML;
          if (questionPage == "Ability to Pay Calculator - Basic Information") {
            // Fetch and display the county
            get_interview_variables().then(function(response) {
              // Extract the state and county from the response
              const state = response.variables.state;
              const county = response.variables.county;
      
              // Update the state dropdown and trigger the 'change' event
              const stateElement = document.getElementById(btoa("state").replace("=", ""));
              stateElement.value = state;
              stateElement.dispatchEvent(new Event('change'));
      
              // Use a promise or callback to ensure the county dropdown is populated before setting the value
              populateCountyDropdown(county).then(function() {
                const countyElement = document.getElementById(btoa("county").replace("=", ""));
                countyElement.value = county;
              });
            }).catch(function(error) {
              console.error('Error fetching interview variables:', error);
            });
          }
        });
      
        // Example of a function to populate the county dropdown (you can customize this as needed)
        function populateCountyDropdown(county) {
          return new Promise(function(resolve, reject) {
            // Assuming you're populating the county dropdown here
            const countyDropdown = document.getElementById(btoa("county").replace("=", ""));
            if (countyDropdown) {
              // Add county options (this is a simple example)
              // In your real case, you should ensure the dropdown is populated with actual data first
              const option = document.createElement('option');
              option.value = county;
              option.textContent = county;
              countyDropdown.appendChild(option);
      
              // Resolve the promise once the county is added to the dropdown
              resolve();
            } else {
              reject('County dropdown not found');
            }
          });
        }
      </script>
check in: update_counties
continue button field: basic_info
---
event: update_counties
code: |
  if action_argument('_changed') == 'state':
    background_response(
      {
        'county':
          {
            'choices': \
              get_state_county_names(action_argument('state')) \
              or \
              ['N/A']
          }
      }, 'fields')
  background_response()